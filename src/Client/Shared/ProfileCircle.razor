@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@using System.Security.Principal
@using Trailblazor.Shared.Infrastructure

@inject AuthenticationStateProvider AuthProvider

@inherits ComponentBase

<div class="profile-container">
    <div id="profileMenu" class="profile-circle" @onmousedown="OpenProfileMenu" @onmousedown:preventDefault="true">
        <AuthorizeView>
            <Authorized>
                <img alt="profile image" src="@User.Image()" title="@User.UserName()" />
            </Authorized>
            <NotAuthorized>
                <svg alt="placeholder profile image"></svg>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <ContextMenu @ref="_contextMenu">
        <ContextMenuAction>
            <span><i class="fa-duotone fa-fw fa-sliders me-2" aria-hidden="true"></i>&nbsp;Settings</span>
        </ContextMenuAction>
    </ContextMenu>
</div>

@code {
    private ContextMenu _contextMenu = null!;

    private ClaimsPrincipal? _user;
    private ClaimsPrincipal? User
    {
        get => _user;
        set
        {
            _user = value;
            StateHasChanged();
        }
    }

    private async Task OnAuthStateChanged(Task<AuthenticationState> authenticationStateTask)
        => User = (await authenticationStateTask).User;

    private bool HasImageClaim => User is ClaimsPrincipal user && user.Identity is IIdentity identity && !string.IsNullOrWhiteSpace(user.Image());

    private async Task OpenProfileMenu(MouseEventArgs args)
    {
        // Only execute method if the mouse input was a left click.
        // We're using the "mousedown" event instead of "click" because we want to prevent the blur event from occuring
        // before we close the menu. This is to prevent the menu from closing and opening every time we click the element.
        if (args.Button != 0)
            return;

        if (_contextMenu.IsOpen)
        {
            await _contextMenu.CloseMenu();
        }
        else
        {
            await _contextMenu.OpenMenu();
            await _contextMenu.MoveToTarget("profileMenu");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AuthProvider.AuthenticationStateChanged += async (authenticationStateTask) => await OnAuthStateChanged(authenticationStateTask);

        await OnAuthStateChanged(AuthProvider.GetAuthenticationStateAsync());

        await base.OnInitializedAsync();
    }
}
