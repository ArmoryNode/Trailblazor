@using Trailblazor.Client.Shared.Helpers

@inject IJSRuntime JSRuntime

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

<menu tabindex="0"
      id="@ElementId"
      class="@ClassBuilder.Build"
      style="--menu-item-count: @Actions.Count"
      @ref="_elementRef"
      @onblur="CloseMenu"
      @onfocus="OpenMenu">
    @foreach (var action in Actions)
    {
        <li class="tb-context-menu-action" @onclick="() => action.Action.Invoke(this)">
            @if (action.ChildContent is RenderFragment template)
            {
                @template
            }
            else
            {
                @action.Text
            }
        </li>
    }
</menu>

@code {

    [Parameter]
    public Guid UUID { get; set; } = Guid.NewGuid();

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    public bool IsOpen => ClassBuilder.HasClass("open");

    public Task CloseMenu(FocusEventArgs? args = null)
    {
        ClassBuilder.RemoveClass("open");
        return Task.CompletedTask;
    }

    public async Task OpenMenu(FocusEventArgs? args = null)
    {
        ClassBuilder.AddClass("open");
        await _elementRef.FocusAsync();
    }

    public async Task MoveToTarget(string targetId)
    {
        await ModuleInstance.InvokeVoidAsync("moveToTarget", targetId);
    }

    public async Task MoveToMouse(MouseEventArgs args)
    {
        await ModuleInstance.InvokeVoidAsync("moveToPointer", args);
    }

    public void AddAction(ContextMenuAction action)
        => Actions.Add(action);

    public void RemoveAction(ContextMenuAction action)
        => Actions.Remove(action);

    #region Internal

    private string ElementId => $"context-menu_{UUID.ToString("n")}";

    private ElementReference _elementRef;

    private ClassBuilder ClassBuilder = new("tb-context-menu");

    private IJSObjectReference ModuleInstance { get; set; } = null!;

    private List<ContextMenuAction> Actions { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Components/ContextMenu.razor.js");
            ModuleInstance = await module.InvokeAsync<IJSObjectReference>("create", ElementId);
            ClassBuilder.ClassesChanged += (sender, args) => StateHasChanged();
        }
    }

    #endregion
}
